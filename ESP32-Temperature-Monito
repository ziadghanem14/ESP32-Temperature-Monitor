#include <WiFi.h>
#include <HTTPClient.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>
#include <UniversalTelegramBot.h>
#include <WiFiClientSecure.h>
#include <ArduinoJson.h>

// WiFi
const char* ssid = "montafe";
const char* password = "12345678";

// Telegram
String botToken = "7524768148:AAFF1OZt8nSSv0L7FpRgZiIR2WYqU8U0Yqs";
String chatID = "5182923617";

// DHT
#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// LCD
LiquidCrystal_I2C lcd(0x27, 12, 2);  // ØªØºÙŠÙŠØ± Ø§Ù„Ø¹Ø±Ø¶ Ø¥Ù„Ù‰ 12 Ø¹Ù…ÙˆØ¯Ù‹Ø§

// LEDs
#define RED_LED 25
#define GREEN_LED 26
#define BLUE_LED 27

// Buzzer
#define BUZZER_PIN 14

// Control Buzzer from Telegram
bool buzzerState = true;  // Default buzzer state is ON

// Telegram bot object
WiFiClientSecure client;
UniversalTelegramBot bot(botToken, client);

// Bot check timing
unsigned long botLastTime = 0;
const unsigned long BOT_INTERVAL = 1000; // Check for new messages every second

// Timing for reading temperature and humidity
unsigned long previousMillis = 0;
const long interval = 500;  // 500 ms (half second) between each reading
String lastAlert = "";  // Track last alert to avoid duplicates

void setup() {
  Serial.begin(115200);

  // WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("\nConnecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nConnected!");

  // Allow insecure connections for Telegram API (only for development)
  client.setCACert(NULL);
  client.setInsecure();

  // DHT
  dht.begin();

  // LCD
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("System Started");

  // LEDs
  pinMode(RED_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(BLUE_LED, OUTPUT);

  // Buzzer
  pinMode(BUZZER_PIN, OUTPUT);

  // Send Start Message
  sendTelegramMessage("âœ… System Started Successfully!");
}

void loop() {
  unsigned long currentMillis = millis();

  // Check temperature and humidity readings (every half second)
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    checkTemperature();
  }

  // Check for new Telegram messages (every second)
  if (currentMillis - botLastTime > BOT_INTERVAL) {
    botLastTime = currentMillis;
    checkNewMessages();
  }
}

void checkTemperature() {
  // Read temperature and humidity
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Display Temperature and Humidity on LCD without decimal places in the same line
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("T:");
  lcd.print((int)temperature); // Convert to integer
  lcd.print((char)223);
  lcd.print("C  H:");
  lcd.print((int)humidity); // Convert to integer
  lcd.print("%");

  String currentAlert = "";

  if (temperature < 20) {
    // Cold
    digitalWrite(RED_LED, HIGH);
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(BLUE_LED, LOW);
    if (buzzerState) tone(BUZZER_PIN, 1000, 1000);  // Low tone
    currentAlert = "ðŸ§£ It's cold (" + String((int)temperature) + "Â°C)! Turn on heater.";
    lcd.setCursor(0, 1);
    lcd.print("Turn on heater!");

  } else if (temperature > 30) {
    // Hot
    digitalWrite(RED_LED, LOW);
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(BLUE_LED, HIGH);
    if (buzzerState) tone(BUZZER_PIN, 3000, 1000);  // High tone
    currentAlert = "ðŸ¥µ It's hot (" + String((int)temperature) + "Â°C)! Turn on AC.";
    lcd.setCursor(0, 1);
    lcd.print("Turn on AC!");

  } else {
    // Ideal
    digitalWrite(RED_LED, LOW);
    digitalWrite(GREEN_LED, HIGH);
    digitalWrite(BLUE_LED, LOW);
    noTone(BUZZER_PIN);  // No sound
    lcd.setCursor(0, 1);
    lcd.print("Pleasant weather");
    currentAlert = "";  // No alert to send
  }

  // Send Alert only if it's different and not empty
  if (currentAlert != "" && currentAlert != lastAlert) {
    sendTelegramMessage(currentAlert);
    lastAlert = currentAlert;  // Update last alert
  }
}

void checkNewMessages() {
  int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String text = bot.messages[i].text;
    
    // Only process messages from authorized users
    if (chat_id == chatID) {
      handleTelegramCommand(text);
    }
  }
}

// Function to send Telegram message
void sendTelegramMessage(String message) {
  if (WiFi.status() == WL_CONNECTED) {
    bool messageSent = bot.sendMessage(chatID, message, "");
    if (messageSent) {
      Serial.println("Telegram message sent successfully!");
    } else {
      Serial.println("Error sending Telegram message.");
    }
  } else {
    Serial.println("WiFi Disconnected");
  }
}

// Function to handle Telegram commands like /buzzer_on, /status, etc.
void handleTelegramCommand(String command) {
  if (command == "/buzzer_on") {
    buzzerState = true;
    sendTelegramMessage("ðŸ”” Buzzer is now ON");
  } else if (command == "/buzzer_off") {
    buzzerState = false;
    noTone(BUZZER_PIN);  // Make sure to turn off immediately
    sendTelegramMessage("ðŸ”• Buzzer is now OFF");
  } else if (command == "/status") {
    // Show current temperature and humidity status
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    
    String statusMessage = "ðŸ“Š Status:\n";
    statusMessage += "Temp: " + String((int)temperature) + "C\n";
    statusMessage += "Hum: " + String((int)humidity) + "%\n";
    statusMessage += "Buzzer: " + String(buzzerState ? "ON" : "OFF");
    
    sendTelegramMessage(statusMessage);
  } else if (command == "/help") {
    String helpMessage = "Available commands:\n";
    helpMessage += "/status - Get current readings\n";
    helpMessage += "/buzzer_on - Turn alert buzzer on\n";
    helpMessage += "/buzzer_off - Turn alert buzzer off\n";
    helpMessage += "/help - Show this help";
    
    sendTelegramMessage(helpMessage);
  } else {
    sendTelegramMessage("Unknown command. Type /help for available commands.");
  }
}
